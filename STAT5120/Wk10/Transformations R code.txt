require(faraway)
require(MASS)

data(savings, package="faraway")
lmod <- lm(sr ~ pop15+pop75+dpi+ddpi, savings)
summary(lmod)
head(savings)
par(mfrow=c(1,2))
boxcox(lmod, plotit=T)
boxcox(lmod, plotit=T, lambda=seq(0.5, 1.5, by = 0.1))



data(gala, package="faraway")
lmod <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
windows()
par(mfrow=c(1,2))
bctrans <- boxcox(lmod, plotit=T, lambda=seq(-.25, .75, by = 0.05))

lambda <- bctrans$x
loglh <- bctrans$y
boxcox <- cbind(lambda, loglh)
l <- boxcox[order(-loglh),][1,1]      #Using log-likelihood to maximize lambda
l
bc.trans.reg <- lm (Species^l ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
summary(bc.trans.reg)




~~~~~~~~~~~~~~~~~~~~~~~~~~~~

data(leafburn, package="faraway")
windows()
lmod <- lm(burntime ~ nitrogen + chlorine + potassium, leafburn)
par(mfrow=c(1,2))
logtrans(lmod, plotit=TRUE, alpha=seq(-min(leafburn$burntime) + .001, 0, by=.01))
logtrans(lmod, plotit=TRUE, alpha=seq(-.846, -.825, by=.01))


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


###  Broken Stick Regression 

par(mfrow=c(1,1))
lmod1 <- lm(sr ~ pop15, savings, subset=(pop15 < 35))
lmod2 <- lm(sr ~ pop15, savings, subset=(pop15 > 35))
plot(sr ~ pop15, savings, xlab="Pop'n under 15", ylab="Savings Rate")
abline(v=35, lty=5)
segments(20, lmod1$coef[1]+lmod1$coef[2]*20, 35, lmod1$coef[1]+lmod1$coef[2]*35)
segments(48, lmod2$coef[1]+lmod2$coef[2]*48, 35, lmod2$coef[1]+lmod2$coef[2]*35)

###  In the above you see the two linear models do not meet.  
###  We need to do something else if we insist the mean response 
###  should be modeled as a continuous function of the predictor.  

lhs <- function(x) ifelse(x < 35, 35-x, 0)
rhs <- function(x) ifelse(x < 35, 0, x-35)
lmod <- lm ( sr ~ lhs(pop15) + rhs(pop15), savings)
x <- seq(20, 48, by=1)
py <- lmod$coef[1] + lmod$coef[2]*lhs(x) + lmod$coef[3]*rhs(x)
summary(lmod)
lines(x, py, lty=2)



~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#########Polynomial

library(faraway)
data <- savings
attach(data)

out1 <- lm(sr ~ ddpi)
out2 <- lm(sr ~ ddpi + I(ddpi^2))   
out3 <- lm(sr ~ ddpi + I(ddpi^2)+ I(ddpi^3))  

sumary(out1)
sumary(out2)
sumary(out3)

windows()
par(mfrow=c(1, 3))
poly1 <- function(x) out1$coefficient[2]*x + out1$coefficient[1]
curve(poly1, col="red", lwd=2, from=-1, to=18)
points(ddpi, sr, type="p", lwd=3)
 
poly2 <- function(x) out2$coefficient[3]*x^2 + out2$coefficient[2]*x + out2$coefficient[1]
curve(poly2, col="red", lwd=2, from=-1, to=18)
points(ddpi, sr, type="p", lwd=3)

poly3 <- function(x) out3$coefficient[4]*x^3 + out3$coefficient[3]*x^2 + out3$coefficient[2]*x + out3$coefficient[1]
curve(poly3, col="red", lwd=2, from=-1, to=18)
points(ddpi, sr, type="p", lwd=3)



~~~~~~~~~~~~~~
######### Build heirachial models: typically should 
######### keep lower order terms.  


modsavings <- data.frame(savings, mddpi=savings$ddpi-10)
summary(lm(sr ~ mddpi+I(mddpi^2), modsavings))

##### compare this output to that of the previous...  indicates 
##### to maybe get rid of the mddpi coef, right?  No!  Don't do it. 

##### Illustrate the fact that setting the linear term to zero means
##### the function is optimized at predictor = 0 using
##### 1. Excel program on Quadratic Regression; 2. taking derivative of 
##### a quadratic y = ax^2 + bx + c




~~~~~~~~~~~~~~~
#############  Orthogonal Polynomials
lmod <- lm(sr ~ poly(ddpi, 4), savings)
sumary(lmod)


~~~~~~~~~~~~~
########## Response Surface/ polynomials with interaction terms
lmod <- lm(sr ~ polym(pop15, ddpi, degree=2), savings)
pop15r <- seq(20, 50, len=10)
ddpir <- seq(0, 20, len=10)
pgrid <- expand.grid(pop15=pop15r, ddpi=ddpir)
pv <- predict(lmod, pgrid)
persp(pop15r, ddpir, matrix(pv, 10, 10), theta=45, xlab="Pop under 15", ylab="Growth", zlab="Savings rate", ticktype="detailed", shade = .25)





~~~~~~~~~~~~~~~~~~~~~
#################
#################  Splines
windows()
funky <- function(x) sin(2*pi*x^3)^3
x <- seq(0, 1, by = 0.01)
y <- funky(x) + 0.1*rnorm(101)
matplot(x, cbind(y, funky(x)), type="pl", ylab="y", pch=20, lty=1, col=1)

### adding orthog. polys of deg 4 and 12...

g4 <- lm(y ~ poly(x, 4))
g12 <- lm(y ~ poly(x, 12))
matplot(x, cbind(y, g4$fit, g12$fit), type="pll", ylab="y", lty=c(1,2), pch=20, col=1)


require(splines)
knots <- c(0, 0, 0, 0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 1, 1, 1, 1)
bx <- splineDesign(knots,x)
lmodb <- lm(y ~ bx-1)
par(mfrow=c(1, 2))
matplot(x, bx, type ="l", col=1)
matplot(x, cbind(y, lmodb$fit), type = "pl", ylab="y", pch=20, lty=1, col=1)

########smoothing spline!!!
ssf <- smooth.spline(x, y)
matplot(x, cbind(y, ssf$y), type="pl", ylab = "y", lty=1, pch=20, col=1)
